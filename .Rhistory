}
height_in_meters(5.6)
height_in_meters <- imperial_to_metric(5.6)
imperial_to_metric <- function(feet, inches) {
first <- feet / 3.28
meters <- feet / 3.28 + inches / 39.37
return (meters)
}
height_in_meters <- imperial_to_metric(5, 6)
height_in_meters
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("curry", "rice")
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("toast", "eggs", "tea")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("soup", "pb + j")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("curry", "rice")
# Exercise 1: creating and accessing lists
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("toast", "eggs", "tea")
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("soup", "pb + j")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals$dinner <- c("curry", "rice")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
### Challenge ###
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
items <- lapply(meals, length)
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal) {
meal <- c(meal, "pizza")
meal  # return the new vector
}
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
heights <- 58:63
weights <- 117:122
my_data <- data.frame(heights, weights)
my_data
dim (my_data)
View(my_data)
# Create a vector of the number of points the Seahawks scored in the first 4 games
# of the season (google "Seahawks" for the scores!)
scores1 <- c(12 3 37 27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
scores2 <- c(18, 9, 18, 17)
# Combine your two vectors into a dataframe called `games`
games <- scores1$score2
# Combine your two vectors into a dataframe called `games`
games <- scores1$scores2
games <- c(a, b)
a <- c(12 3 37 27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
b <- c(18, 9, 18, 17)
# Combine your two vectors into a dataframe called `games`
games <- c(a, b)
a <- c(12 3 37 27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
b <- c(18, 9, 18, 17)
# Combine your two vectors into a dataframe called `games`
games <- c(a, b)
a <- c(12 3 37 27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
b <- c(18, 9, 18, 17)
# Combine your two vectors into a dataframe called `games`
games <- c(a, b)
a <- c(12 3 37 27)
# Create a vector of the number of points the Seahwaks have allowed to be scored
# against them in each of the first 4 games of the season
b <- c(18, 9, 18, 17)
# Combine your two vectors into a dataframe called `games`
games <- c(a, b)
a <- c(12 3 37 27)
scores <- c(12 3 37 27)
scores <- c(12, 3, 37, 27)
scores_allowed <- c(18, 9, 18, 17)
games <- data.frame(scores, scores_allowed)
View(games)
game$diff <- game$scores - game$scores_allowed
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- game$diff > 0
games <- data.frame(scores, scores_allowed)
# Create a new column "diff" that is the difference in points between the teams
# Hint: recall the syntax for assigning new elements (which in this case will be
# a vector) to a list!
games$diff <- game$scores - game$scores_allowed
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- game$diff > 0
games$diff <- games$scores - games$scores_allowed
# Create a new column "won" which is TRUE if the Seahawks won the game
games$won <- games$diff > 0
# Create a vector of the opponent na
View(games)
Evector <- paste("Employee")
Evector
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
Evector <- paste("Employee", 5)
Evector
Evector <- paste("Employee", 1:100)
Evector
?runif()
Salaries <- runif(100, min = 40000, max = 50000)
Salaries_2018 <- Salaries_2017 + runif(100, min = -5000, max = 10000)
Salaries_2017 <- runif(100, min = 40000, max = 50000)
Salaries_2018 <- Salaries_2017 + runif(100, min = -5000, max = 10000)
salaries <- data.frame(Employees, Salaries_2017, Salaries_2018, stringsAsFactors=FALSE)
salaries <- data.frame(Employee, Salaries_2017, Salaries_2018, stringsAsFactors=FALSE)
Employee <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
Salaries_2017 <- runif(100, min = 40000, max = 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
Salaries_2018 <- Salaries_2017 + runif(100, min = -5000, max = 10000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(Employee, Salaries_2017, Salaries_2018, stringsAsFactors=FALSE)
salaries$change <- Salaries_2018 - Salaries_2017
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
source('~/Desktop/info201/a2-core-skills-jenli36/assignment.R')
source('~/Desktop/info201/a2-core-skills-jenli36/assignment.R')
source('~/Desktop/info201/a2-core-skills-jenli36/assignment.R')
source('~/Desktop/info201/ch9-data-frames/exercise-2/exercise.R')
the_data <- data.frame(USPersonalExpenditure, stringsAsFactors = False)
View(the_data)
source('~/Desktop/info201/ch9-data-frames/exercise-3/exercise.R')
library(splyr)
widths <- select(iris, Speal.Width, Petal.Width)
iris[,Sepal.Width]
install.packages(splyr)
library(splyr)
widths <- select(iris, Speal.Width, Petal.Width)
iris[,Sepal.Width]
install.packages("splyr")
library(splyr)
widths <- select(iris, Speal.Width, Petal.Width)
iris[,Sepal.Width]
install.packages("splyr")
library(splyr)
widths <- select(iris, Sepal.Width, Petal.Width)
iris[,Sepal.Width]
install.packages("dplyr")
source('~/Desktop/info201/ch10-dplyr/exercise-2/exercise.R')
library(fueleconomy)
# Install and load the "dplyr" library
install.packages("dplyr")
library("dplyr")
makes <- select(vehicles, make)
makes <- select(vehicles, make)
iris
iris %>% filter(Petal. Length > 2) %>% filter (Petal.Width == max(Petal.Width)) %>% paste("is the best flower")
iris %>% filter(Petal.Length > 2) %>% filter (Petal.Width == max(Petal.Width)) %>% paste("is the best flower")
VIew
View()
source('~/Desktop/info201/ch10-dplyr/exercise-3/exercise.R')
source('~/Desktop/info201/ch10-dplyr/exercise-3/exercise.R')
acuras <- filter(vehicles, make == 'Acura', year == 2015)
best_acura <- filter(acuras, hwy == max(hwy))
best_model <- select(best_acura, model)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
best_model <- select(
filter(
filter(vehicles, make == 'Acura', year == 2015), hwy == max(hwy)
), model
)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr and the pipe operator)
best_model <- filter(vehicles, make == 'Acura', year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
View(mtcars)
select(mtcars, mpg, cyl)
library(dplyr)
select(mtcars, mpg, cyl)
%>% filter(cyl == 4)
select(mtcars, mpg, cyl) %>%
filter(cyl == 4)
library(dplyr)
select(mtcars, mpg, cyl) %>%
filter(cyl == 4)
mutate(double_cyl = cyl * 2)
library(dplyr)
select(mtcars, mpg, cyl) %>%
filter(cyl == 4)%>%
mutate(double_cyl = cyl * 2)
library(dplyr)
select(mtcars, mpg, cyl) %>%
filter(cyl == 4)%>%
mutate(double_cyl = cyl * 2
mpg_per_cyl = mpg / cyl)
library(dplyr)
select(mtcars, mpg, cyl) %>%
filter(cyl == 4)%>%
mutate(double_cyl = cyl * 2,
mpg_per_cyl = mpg / cyl)
temp$mpg[3]
tmp$mpg[3]
library(nycflights13)
library9
library(nycflights13)
library(nycflights13)
library(nycflights3)
install.packages("nycflights13")
library("dplyr")
library("nycflights13")
nrow("nycflights13")
nrow(nycflights13)
View(nycflights13)
View("nycflights13")
nrow(flights)
View
View(flights)
ncol(flights)
colnames(flights)
??flights
flights <- mutate(flights, flight_in_air = arr_delay - dep_delay)
flights
hist(flights$flight_in_air)
flights <- flights %>%
arrange(-time_gained)
flights <- flights %>%
arrange(-flight_in_air)
summarize(flights, mean = mean(flight_in_air, na.rm = T))
jfk_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select (origin, dest, flight_in_air)
flights
summarize(jfk_sea, mean = mean(flight_in_air, na.rm = T))
summary <- flights %<%
filter(origin = "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(flight_in_air, na.rm = T),
min_time = min(flight_in_air, na.rm = T),
max_time = max(flight_in_air, na.rm = T)
)
summary <- flights %>%
filter(origin = "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(flight_in_air, na.rm = T),
min_time = min(flight_in_air, na.rm = T),
max_time = max(flight_in_air, na.rm = T)
)
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(flight_in_air, na.rm = T),
min_time = min(flight_in_air, na.rm = T),
max_time = max(flight_in_air, na.rm = T)
)
flights %>%
group_by(origin) %>%
summarize(avg_delay = mean(dep_delay, NA.RM =T))
dep_delay_by_month <- group_by(month, dep_delay)
dep_delay_by_month <- group_by(flights, month)
View(dep_delay_by_month)
View(dep_delay_by_month)
summarize(dep_delay_by_month = mean(dep_delay))
summarize(dep_delay_by_month = mean(dep_delay))
dep_delay_by_month <- group_by(flights, month) %>%
summarize(dep_delay_by_month = mean(dep_delay))
View(dep_delay_by_month)
library(nycflights13)
library(dplyr)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarize(dep_delay_by_month = mean(dep_delay))
dep_delay_by_month <- group_by(flights, month) %>%
summarize(dep_delay_by_month = mean(dep_delay), na.rm == T)
dep_delay_by_month <- flights %>% group_by(month) %>%
summarize(dep_delay_by_month = mean(dep_delay), na.rm == TRUE)
dep_delay_by_month <- flights %>% group_by(month) %>%
summarize(dep_delay_by_month = mean(dep_delay), na.rm = TRUE)
dep_delay_by_month
dep_delay_by_month <- flights %>% group_by(month) %>%
summarize(average_delay = mean(dep_delay), na.rm = TRUE)
View(dep_delay_by_month)
View(dep_delay_by_month)
dep_delay_by_month <- flights %>% group_by(month) %>%
summarize(average_delay = mean(dep_delay, na.rm = TRUE))
View(dep_delay_by_month)
View(dep_delay_by_month)
filter(dep_delay_by_month, average_delay == max(average_delay)) %>% select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
head(arr_delay_by_month)
library("dplyr")
View(cars)
View(women)
setwd("~/")
install.packages("gtrendsR")
library(gtrendsR)
res <- gtrends("Coco", geo = "US")
gtrends(
"obama", widget$status_code == 300
)
library(gtrendsR)
View(gtrends)
View(gtrendsR)
plot(lang_trend)
library(gtrendsR)
user <- ""
psw <- ""
gconnect(usr, psw)
gconnect(usr, psw)
install.packages("gtrendsR")
install.packages("gtrendsR")
library(gtrendsR)
library(gtrendsR)
gconnect(usr, psw)
library(gtrendsR)
res <- gtrends("Coco", geo = "US")
library(gtrendsR)
plot(gtrendsR::gtrends(keyword = "Superbowl", geo = "US", time = "2017-12-10 2018-01-20"))
gconnect("someuser", "somepassword")
install.packages("gtrendsR")
install.packages("gtrendsR")
library(gtrendsR)
library(gtrendsR)
res <- gtrends(c("nhl", "nba", "nfl"))
## plot (in default mode) as time series
plot(res)
## plot via googeVis to browser
## highlighting regions (probably countries) and cities
plot(res, type = "region")
plot(res, type = "cities")
res <- gtrends(c("nhl", "nba", "nfl"))
devtools::install_github("PMassicotte/gtrendsR")
library(gtrendsR)
res <- gtrends("Coco", geo = "US")
install.packages("curl")
install.packages("curl")
devtools::install_github("PMassicotte/gtrendsR")
library(gtrendsR)
res <- gtrends("Coco", geo = "US")
View(gtrendsR)
library(gtrendsR)
res <- gtrends("Coco", geo = "US")
if (!require("devtools")) install.packages("devtools")
devtools::install_github("PMassicotte/gtrendsR")
gtrends("obama")
setwd("~/Desktop/info201/Final-Project/scripts")
library(httr)
library(jsonlite)
source("api.R")
movie_id <- 383498
base_url <- "https://api.themoviedb.org"
resource <- paste0("/3/movie/", movie_id,"?api_key=", api_key)
url_full <- paste0(base_url, resource)
response <- GET(url(movie_id))
response <- GET(url_full)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)$results
view(body)
View(body)
View(response_content)
movie_id <- 383498
library(httr)
library(jsonlite)
source("api.R")
movie_id <- 383498
base_url <- "https://api.themoviedb.org"
resource <- paste0("/3/movie/", movie_id,"?api_key=", api_key)
url_full <- paste0(base_url, resource)
response <- GET(url_full)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)$results
body <- fromJSON(response_content)$results
shiny::runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
View(data)
runApp('~/Desktop/info201/Final-Project')
View(data)
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
source("scripts/movie.R")
source("scripts/scatter_plot.R")
setwd("~/Desktop/info201/Final-Project")
source("scripts/scatter_plot.R")
source("scripts/movie.R")
source("scripts/scatter_plot.R")
source("scripts/movie.R")
source("scripts/genre_bar.R")
source("scripts/api.R")
data <- read.csv("data/tmdb_dat
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
.
)
shiny::runApp()
runApp()
devtools::install_github('ropensci/plotly')
runApp()
runApp()
library(httr)
library(jsonlite)
source("./scripts/api.R")
library(shiny)
library(plotly)
library(lubridate)
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
a <- ymd(data$release_date)
data$release_year <- year(a)
data <- arrange(data, -release_year)
response <- GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
shinyUI(navbarPage(
theme = "style.css",
headerPanel("Information about movies"),
tabPanel(
"Summary",
titlePanel("Summary of movie dataset"),
tags$p("gfgdgdfgdf")
),
tabPanel(
"scatterplot",
titlePanel("Movie explore"),
sidebarLayout(
sidebarPanel(
selectInput("genre", label = "Please select a genre",
choices = c("", genre_list$name)),
sliderInput("slider1", label = "Please select a year range", min = 1920,
max = 2020, value = c(1930, 2020)),
sliderInput("slider2", label = "Please select a rating range", min = 0,
max = 10, value = c(0, 10))
),
mainPanel(plotlyOutput("scatterplot"))
)
),
tabPanel(
"barplot",
titlePanel("genres by year"),
sidebarLayout(
sidebarPanel(
selectInput("yearvar", label = "Please select release year", choices = data$release_year, selected = 4)
),
mainPanel(plotlyOutput("barplot"))
)
),
tabPanel(
"threeDplot",
titlePanel("movie recommandations"),
sidebarLayout(
sidebarPanel(
selectInput("movie_name", label = "Please select a movie", choices = data$title, selected = "Deadpool 2")
),
mainPanel(plotlyOutput("threeDplot"))
)
)
))
library(plotly)
install.packages("plotly")
runApp()
library(plotly)
remove.packages(plotly, lib)
remove.packages(plotly)
remove.packages("plotly", lib)
remove.packages("plotly")
install.packages("plotly")
library(plotly)
uninstall.packages(c("plotly", "plyr"))
uninstall.packages(c("plotly", "plyr"))
