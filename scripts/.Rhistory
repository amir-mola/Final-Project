library(dplyr)
library(plotly)
source("api.R")
data <- read.csv(file = "../data/tmdb_data.csv")
movie_name <- "Black Panther"
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
amir <- get_data("Zootopia")
p <- plot_ly(amir, text = ~original_title, x = ~vote_count, y = ~vote_average, z = ~release_date,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
p
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
data <- read.csv(file = "../data/tmdb_data.csv")
movie_name <- "Black Panther"
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
amir <- get_data("Zootopia")
p <- plot_ly(amir, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
p
source('C:/Users/Amirm/OneDrive/DOC/University_of_Washington/Spring_2018/INFO 201/info/Final-Project/scripts/movie.R', echo=TRUE)
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
data <- read.csv(file = "../data/tmdb_data.csv")
movie_name <- "Black Panther"
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
amir <- get_data("Zootopia")
p <- plot_ly(amir, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.6,
y = 1.5,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
data <- read.csv(file = "../data/tmdb_data.csv")
movie_name <- "Black Panther"
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
amir <- get_data("Zootopia")
p <- plot_ly(amir, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
data <- read.csv(file = "../data/tmdb_data.csv")
movie_name <- "Black Panther"
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
amir <- get_data("Zootopia")
p <- plot_ly(amir, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
data <- read.csv(file = "../data/tmdb_data.csv")
movie_name <- "Black Panther"
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
dataset <- get_data("Zootopia")
p <- plot_ly(dataset, x = ~release_date, y = ~vote_average, z = ~vote_count,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
data <- read.csv(file = "../data/tmdb_data.csv")
movie_name <- "Black Panther"
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
amir <- get_data("Zootopia")
p <- plot_ly(amir, x = ~release_date, y = ~vote_count, z = ~vote_average,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Date'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Vote Average')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
data <- read.csv(file = "../data/tmdb_data.csv")
movie_name <- "Black Panther"
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
amir <- get_data("Zootopia")
p <- plot_ly(amir, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
# Reads in the tmbd data file ---------------------------------------------
data <- read.csv(file = "../data/tmdb_data.csv")
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
# Returns movie recommendation based on the movie name and maximum of 20
# recommendation
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(movie_name){
dataset <- get_data(movie_name)
p <- plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
return(p)
}
>>>>>>> b90aac7a6d9d756de7ca149cea9219175c29646a
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("scripts/api.R")
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(data, movie_name){
movie <- filter(data, title == movie_name)
movie_id <- movie$id
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
dataset <- as.data.frame(body$results)
if(nrow(dataset) == 0){
p <- plot_ly(dataset, x = ~0, y = ~0, z = ~0,
text = ~"No Recommendation found") %>%
add_markers() %>%
layout(title = "No Recommendation found")
return("p")
}else {
p <- plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
return(p)
}
}
shiny::runApp('C:/Users/Amirm/OneDrive/DOC/University_of_Washington/Spring_2018/INFO 201/info/Final-Project')
runApp('C:/Users/Amirm/OneDrive/DOC/University_of_Washington/Spring_2018/INFO 201/info/Final-Project')
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("scripts/api.R")
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(data, movie_name){
movie <- filter(data, title == movie_name)
movie_id <- movie$id
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
dataset <- as.data.frame(body$results)
if(nrow(dataset) == 0){
p <- plot_ly(dataset, x = ~0, y = ~0, z = ~0,
text = ~"No Recommendation found") %>%
add_markers() %>%
layout(title = "No Recommendation found")
return(p)
}else {
p <- plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
return(p)
}
}
runApp('C:/Users/Amirm/OneDrive/DOC/University_of_Washington/Spring_2018/INFO 201/info/Final-Project')
runApp('C:/Users/Amirm/OneDrive/DOC/University_of_Washington/Spring_2018/INFO 201/info/Final-Project')
