source('~/Desktop/info201/ch10-dplyr/exercise-3/exercise.R')
acuras <- filter(vehicles, make == 'Acura', year == 2015)
best_acura <- filter(acuras, hwy == max(hwy))
best_model <- select(best_acura, model)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr, nesting functions)
best_model <- select(
filter(
filter(vehicles, make == 'Acura', year == 2015), hwy == max(hwy)
), model
)
# Which 2015 Acura model has the best hwy MPG? (Use dplyr and the pipe operator)
best_model <- filter(vehicles, make == 'Acura', year == 2015) %>%
filter(hwy == max(hwy)) %>%
select(model)
View(mtcars)
select(mtcars, mpg, cyl)
library(dplyr)
select(mtcars, mpg, cyl)
%>% filter(cyl == 4)
select(mtcars, mpg, cyl) %>%
filter(cyl == 4)
library(dplyr)
select(mtcars, mpg, cyl) %>%
filter(cyl == 4)
mutate(double_cyl = cyl * 2)
library(dplyr)
select(mtcars, mpg, cyl) %>%
filter(cyl == 4)%>%
mutate(double_cyl = cyl * 2)
library(dplyr)
select(mtcars, mpg, cyl) %>%
filter(cyl == 4)%>%
mutate(double_cyl = cyl * 2
mpg_per_cyl = mpg / cyl)
library(dplyr)
select(mtcars, mpg, cyl) %>%
filter(cyl == 4)%>%
mutate(double_cyl = cyl * 2,
mpg_per_cyl = mpg / cyl)
temp$mpg[3]
tmp$mpg[3]
library(nycflights13)
library9
library(nycflights13)
library(nycflights13)
library(nycflights3)
install.packages("nycflights13")
library("dplyr")
library("nycflights13")
nrow("nycflights13")
nrow(nycflights13)
View(nycflights13)
View("nycflights13")
nrow(flights)
View
View(flights)
ncol(flights)
colnames(flights)
??flights
flights <- mutate(flights, flight_in_air = arr_delay - dep_delay)
flights
hist(flights$flight_in_air)
flights <- flights %>%
arrange(-time_gained)
flights <- flights %>%
arrange(-flight_in_air)
summarize(flights, mean = mean(flight_in_air, na.rm = T))
jfk_sea <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select (origin, dest, flight_in_air)
flights
summarize(jfk_sea, mean = mean(flight_in_air, na.rm = T))
summary <- flights %<%
filter(origin = "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(flight_in_air, na.rm = T),
min_time = min(flight_in_air, na.rm = T),
max_time = max(flight_in_air, na.rm = T)
)
summary <- flights %>%
filter(origin = "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(flight_in_air, na.rm = T),
min_time = min(flight_in_air, na.rm = T),
max_time = max(flight_in_air, na.rm = T)
)
summary <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
summarise(
avg_time = mean(flight_in_air, na.rm = T),
min_time = min(flight_in_air, na.rm = T),
max_time = max(flight_in_air, na.rm = T)
)
flights %>%
group_by(origin) %>%
summarize(avg_delay = mean(dep_delay, NA.RM =T))
dep_delay_by_month <- group_by(month, dep_delay)
dep_delay_by_month <- group_by(flights, month)
View(dep_delay_by_month)
View(dep_delay_by_month)
summarize(dep_delay_by_month = mean(dep_delay))
summarize(dep_delay_by_month = mean(dep_delay))
dep_delay_by_month <- group_by(flights, month) %>%
summarize(dep_delay_by_month = mean(dep_delay))
View(dep_delay_by_month)
library(nycflights13)
library(dplyr)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarize(dep_delay_by_month = mean(dep_delay))
dep_delay_by_month <- group_by(flights, month) %>%
summarize(dep_delay_by_month = mean(dep_delay), na.rm == T)
dep_delay_by_month <- flights %>% group_by(month) %>%
summarize(dep_delay_by_month = mean(dep_delay), na.rm == TRUE)
dep_delay_by_month <- flights %>% group_by(month) %>%
summarize(dep_delay_by_month = mean(dep_delay), na.rm = TRUE)
dep_delay_by_month
dep_delay_by_month <- flights %>% group_by(month) %>%
summarize(average_delay = mean(dep_delay), na.rm = TRUE)
View(dep_delay_by_month)
View(dep_delay_by_month)
dep_delay_by_month <- flights %>% group_by(month) %>%
summarize(average_delay = mean(dep_delay, na.rm = TRUE))
View(dep_delay_by_month)
View(dep_delay_by_month)
filter(dep_delay_by_month, average_delay == max(average_delay)) %>% select(month)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
head(arr_delay_by_month)
library("dplyr")
View(cars)
View(women)
setwd("~/")
install.packages("gtrendsR")
library(gtrendsR)
res <- gtrends("Coco", geo = "US")
gtrends(
"obama", widget$status_code == 300
)
library(gtrendsR)
View(gtrends)
View(gtrendsR)
plot(lang_trend)
library(gtrendsR)
user <- ""
psw <- ""
gconnect(usr, psw)
gconnect(usr, psw)
install.packages("gtrendsR")
install.packages("gtrendsR")
library(gtrendsR)
library(gtrendsR)
gconnect(usr, psw)
library(gtrendsR)
res <- gtrends("Coco", geo = "US")
library(gtrendsR)
plot(gtrendsR::gtrends(keyword = "Superbowl", geo = "US", time = "2017-12-10 2018-01-20"))
gconnect("someuser", "somepassword")
install.packages("gtrendsR")
install.packages("gtrendsR")
library(gtrendsR)
library(gtrendsR)
res <- gtrends(c("nhl", "nba", "nfl"))
## plot (in default mode) as time series
plot(res)
## plot via googeVis to browser
## highlighting regions (probably countries) and cities
plot(res, type = "region")
plot(res, type = "cities")
res <- gtrends(c("nhl", "nba", "nfl"))
devtools::install_github("PMassicotte/gtrendsR")
library(gtrendsR)
res <- gtrends("Coco", geo = "US")
install.packages("curl")
install.packages("curl")
devtools::install_github("PMassicotte/gtrendsR")
library(gtrendsR)
res <- gtrends("Coco", geo = "US")
View(gtrendsR)
library(gtrendsR)
res <- gtrends("Coco", geo = "US")
if (!require("devtools")) install.packages("devtools")
devtools::install_github("PMassicotte/gtrendsR")
gtrends("obama")
setwd("~/Desktop/info201/Final-Project/scripts")
library(httr)
library(jsonlite)
source("api.R")
movie_id <- 383498
base_url <- "https://api.themoviedb.org"
resource <- paste0("/3/movie/", movie_id,"?api_key=", api_key)
url_full <- paste0(base_url, resource)
response <- GET(url(movie_id))
response <- GET(url_full)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)$results
view(body)
View(body)
View(response_content)
movie_id <- 383498
library(httr)
library(jsonlite)
source("api.R")
movie_id <- 383498
base_url <- "https://api.themoviedb.org"
resource <- paste0("/3/movie/", movie_id,"?api_key=", api_key)
url_full <- paste0(base_url, resource)
response <- GET(url_full)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)$results
body <- fromJSON(response_content)$results
shiny::runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
View(data)
runApp('~/Desktop/info201/Final-Project')
View(data)
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
source("scripts/movie.R")
source("scripts/scatter_plot.R")
setwd("~/Desktop/info201/Final-Project")
source("scripts/scatter_plot.R")
source("scripts/movie.R")
source("scripts/scatter_plot.R")
source("scripts/movie.R")
source("scripts/genre_bar.R")
source("scripts/api.R")
data <- read.csv("data/tmdb_dat
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
.
)
shiny::runApp()
runApp()
devtools::install_github('ropensci/plotly')
runApp()
runApp()
library(httr)
library(jsonlite)
source("./scripts/api.R")
library(shiny)
library(plotly)
library(lubridate)
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
a <- ymd(data$release_date)
data$release_year <- year(a)
data <- arrange(data, -release_year)
response <- GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
shinyUI(navbarPage(
theme = "style.css",
headerPanel("Information about movies"),
tabPanel(
"Summary",
titlePanel("Summary of movie dataset"),
tags$p("gfgdgdfgdf")
),
tabPanel(
"scatterplot",
titlePanel("Movie explore"),
sidebarLayout(
sidebarPanel(
selectInput("genre", label = "Please select a genre",
choices = c("", genre_list$name)),
sliderInput("slider1", label = "Please select a year range", min = 1920,
max = 2020, value = c(1930, 2020)),
sliderInput("slider2", label = "Please select a rating range", min = 0,
max = 10, value = c(0, 10))
),
mainPanel(plotlyOutput("scatterplot"))
)
),
tabPanel(
"barplot",
titlePanel("genres by year"),
sidebarLayout(
sidebarPanel(
selectInput("yearvar", label = "Please select release year", choices = data$release_year, selected = 4)
),
mainPanel(plotlyOutput("barplot"))
)
),
tabPanel(
"threeDplot",
titlePanel("movie recommandations"),
sidebarLayout(
sidebarPanel(
selectInput("movie_name", label = "Please select a movie", choices = data$title, selected = "Deadpool 2")
),
mainPanel(plotlyOutput("threeDplot"))
)
)
))
library(plotly)
install.packages("plotly")
runApp()
library(plotly)
remove.packages(plotly, lib)
remove.packages(plotly)
remove.packages("plotly", lib)
remove.packages("plotly")
install.packages("plotly")
library(plotly)
uninstall.packages(c("plotly", "plyr"))
uninstall.packages(c("plotly", "plyr"))
shiny::runApp()
runApp()
shinyUI(navbarPage(
theme = "style.css",
"Explore the movie dataset",
tabPanel(
"Summary",
tags$div(
tags$h2("Project Overview"),
tags$p("This report demonstrates an overview of movie titles, popularities, and genres. The purpose of the report is to provide information regarding highly rated movies so that the viewer can see which year released multiple hits, which genres are popular, and which movie they should watch given their preferences. We believe that the production side of the movie industry could heavily benefit from our data, as it will show general trends amongst movies.
"),
tags$h2("Audience"),
tags$p("While most people enjoy watching movies, our group narrowed down our audience to movie producers who are interested in seeing what kinds are movies are highly ranked and if trends differ depending on year. We also intend movie enthusiasts to benefit from our data as they could find movie ratings and recommendations.
"),
tags$h2("Data"),
tags$p("Using an API from TMBD, we created a dataset that includes 1600 movie titles from 1931 to 2018. Along with the title, other critical information that our data contains are a vote count, vote average, popularity, original language, genre ids, and overview.
"),
tags$h2("Questions"),
tags$li("What genres were popular in a given year?"),
tags$li("Did certain years have more highly voted movies?"),
tags$li("What movies are recommended given a previously liked movie title?"),
tags$h2("Structure"),
tags$li("The first tab is a scatterplot that shows"),
tags$li("The second tab is a bar graph that provides the viewer information regarding release years
and genres. The user selects a year from the side bar and is shown a bar graph of the movies released that year categorized by genre. Most movies have multiple genres, so there are overlaps within the shown data."),
tags$li("The last tab shows a 3D plot of maximum of 20 recommended movies (based on the selected movie), and their vote count, vote average and release date.
"),
tags$h2("Further Analysis"),
tags$p("While our analysis does answer some useful questions, we can further analyse to answer more specific questions such as:
"),
tags$li("Does the  original language affect the voting ranking as some languages are more widely spoken?
"),
tags$h2("Project Creators"),
tags$li("Amir Mola"),
tags$img(src = "https://scontent.fsea1-1.fna.fbcdn.net/v/t1.0-1/18033341_417189041992204_458043244687472060_n.jpg?_nc_cat=0&_nc_eui2=AeHl4Q81BR0RuOkZgK43sNHzeGyugdy9yucKgCnE0gbYcNyB-KuTm-cgxkpvEFozFTwmfvyNL7JMcvLbiRp6DmdTmt3Sz4pMOZnhrMr8P-_U-w&oh=15a95c2ea00a8588df116c50204d3543&oe=5BBADD44", width = "200px", height = "200px"),
tags$li("Leona Wada"),
tags$img(src = "https://media.licdn.com/dms/image/C4D03AQFfLeltdKQYdQ/profile-displayphoto-shrink_800_800/0?e=1533168000&v=beta&t=9esnBSPiB-lu3lrz98j_FXX5TeJaGgCMIZC4QUDWs-U", width = "200px", height = "200px"),
tags$li("Katie Chen"),
tags$img(src = "https://media.licdn.com/dms/image/C5603AQHh_BurGeIptQ/profile-displayphoto-shrink_800_800/0?e=1533168000&v=beta&t=LR8Uad5pJuwlzBxArst6z3Bb6COIaptqc1VID5dH_N0", width = "200px", height = "200px"),
tags$li("Jennifer Li"),
tags$img(src = "https://scontent-sea1-1.xx.fbcdn.net/v/t1.0-9/27067724_2060265067333436_3074257672452513759_n.jpg?oh=1a75daafb7fb762458c914dc26b5f99b&oe=5AEB5A9A", width = "200px", height = "200px")
)),
tabPanel(
"scatterplot",
titlePanel("Movie explore"),
tags$p("The first tab is a scatterplot that shows"),
sidebarLayout(
sidebarPanel(
tags$p("The first tab is a scatterplot that shows"),
selectInput("genre", label = "Please select a genre",
choices = c("", genre_list$name)),
sliderInput("slider1", label = "Please select a year range", min = 1920,
max = 2020, value = c(1930, 2020)),
sliderInput("slider2", label = "Please select a rating range", min = 0,
max = 10, value = c(0, 10))
),
mainPanel(plotlyOutput("scatterplot"))
)
),
tabPanel(
"barplot",
titlePanel("genres by year"),
tags$p("The second tab is a bar graph that provides the viewer information regarding release years
and genres. The user selects a year from the side bar and is shown a bar graph of the movies released that year categorized by genre. Most movies have multiple genres, so there are overlaps within the shown data."),
sidebarLayout(
sidebarPanel(
tags$p("The second tab is a bar graph that provides the viewer information regarding release years
and genres. The user selects a year from the side bar and is shown a bar graph of the movies released that year categorized by genre. Most movies have multiple genres, so there are overlaps within the shown data."),
selectInput("yearvar", label = "Please select release year", choices = data$release_year, selected = 4)
),
mainPanel(plotlyOutput("barplot"))
)
),
tabPanel(
"threeDplot",
titlePanel("movie recommandations"),
sidebarLayout(
sidebarPanel(
selectInput("movie", label = "Please select a movie", choices = data$title, selected = "Deadpool 2")
),
mainPanel(plotlyOutput("threeDplot"))
)
)
))
library(httr)
library(jsonlite)
source("scripts/api.R")
library(shiny)
library(plotly)
library(lubridate)
data <- read.csv("./data/tmdb_data.csv", stringsAsFactors = FALSE)
a <- ymd(data$release_date)
data$release_year <- year(a)
data <- arrange(data, -release_year)
response <- GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
shinyUI(navbarPage(
theme = "style.css",
"Explore the movie dataset",
tabPanel(
"Summary",
tags$div(
tags$h2("Project Overview"),
tags$p("This report demonstrates an overview of movie titles, popularities, and genres. The purpose of the report is to provide information regarding highly rated movies so that the viewer can see which year released multiple hits, which genres are popular, and which movie they should watch given their preferences. We believe that the production side of the movie industry could heavily benefit from our data, as it will show general trends amongst movies.
"),
tags$h2("Audience"),
tags$p("While most people enjoy watching movies, our group narrowed down our audience to movie producers who are interested in seeing what kinds are movies are highly ranked and if trends differ depending on year. We also intend movie enthusiasts to benefit from our data as they could find movie ratings and recommendations.
"),
tags$h2("Data"),
tags$p("Using an API from TMBD, we created a dataset that includes 1600 movie titles from 1931 to 2018. Along with the title, other critical information that our data contains are a vote count, vote average, popularity, original language, genre ids, and overview.
"),
tags$h2("Questions"),
tags$li("What genres were popular in a given year?"),
tags$li("Did certain years have more highly voted movies?"),
tags$li("What movies are recommended given a previously liked movie title?"),
tags$h2("Structure"),
tags$li("The first tab is a scatterplot that shows"),
tags$li("The second tab is a bar graph that provides the viewer information regarding release years
and genres. The user selects a year from the side bar and is shown a bar graph of the movies released that year categorized by genre. Most movies have multiple genres, so there are overlaps within the shown data."),
tags$li("The last tab shows a 3D plot of maximum of 20 recommended movies (based on the selected movie), and their vote count, vote average and release date.
"),
tags$h2("Further Analysis"),
tags$p("While our analysis does answer some useful questions, we can further analyse to answer more specific questions such as:
"),
tags$li("Does the  original language affect the voting ranking as some languages are more widely spoken?
"),
tags$h2("Project Creators"),
tags$li("Amir Mola"),
tags$img(src = "https://scontent.fsea1-1.fna.fbcdn.net/v/t1.0-1/18033341_417189041992204_458043244687472060_n.jpg?_nc_cat=0&_nc_eui2=AeHl4Q81BR0RuOkZgK43sNHzeGyugdy9yucKgCnE0gbYcNyB-KuTm-cgxkpvEFozFTwmfvyNL7JMcvLbiRp6DmdTmt3Sz4pMOZnhrMr8P-_U-w&oh=15a95c2ea00a8588df116c50204d3543&oe=5BBADD44", width = "200px", height = "200px"),
tags$li("Leona Wada"),
tags$img(src = "https://media.licdn.com/dms/image/C4D03AQFfLeltdKQYdQ/profile-displayphoto-shrink_800_800/0?e=1533168000&v=beta&t=9esnBSPiB-lu3lrz98j_FXX5TeJaGgCMIZC4QUDWs-U", width = "200px", height = "200px"),
tags$li("Katie Chen"),
tags$img(src = "https://media.licdn.com/dms/image/C5603AQHh_BurGeIptQ/profile-displayphoto-shrink_800_800/0?e=1533168000&v=beta&t=LR8Uad5pJuwlzBxArst6z3Bb6COIaptqc1VID5dH_N0", width = "200px", height = "200px"),
tags$li("Jennifer Li"),
tags$img(src = "https://scontent-sea1-1.xx.fbcdn.net/v/t1.0-9/27067724_2060265067333436_3074257672452513759_n.jpg?oh=1a75daafb7fb762458c914dc26b5f99b&oe=5AEB5A9A", width = "200px", height = "200px")
)),
tabPanel(
"scatterplot",
titlePanel("Movie explore"),
tags$p("The first tab is a scatterplot that shows"),
sidebarLayout(
sidebarPanel(
tags$p("The first tab is a scatterplot that shows"),
selectInput("genre", label = "Please select a genre",
choices = c("", genre_list$name)),
sliderInput("slider1", label = "Please select a year range", min = 1920,
max = 2020, value = c(1930, 2020)),
sliderInput("slider2", label = "Please select a rating range", min = 0,
max = 10, value = c(0, 10))
),
mainPanel(plotlyOutput("scatterplot"))
)
),
tabPanel(
"barplot",
titlePanel("genres by year"),
tags$p("The second tab is a bar graph that provides the viewer information regarding release years
and genres. The user selects a year from the side bar and is shown a bar graph of the movies released that year categorized by genre. Most movies have multiple genres, so there are overlaps within the shown data."),
sidebarLayout(
sidebarPanel(
tags$p("The second tab is a bar graph that provides the viewer information regarding release years
and genres. The user selects a year from the side bar and is shown a bar graph of the movies released that year categorized by genre. Most movies have multiple genres, so there are overlaps within the shown data."),
selectInput("yearvar", label = "Please select release year", choices = data$release_year, selected = 4)
),
mainPanel(plotlyOutput("barplot"))
)
),
tabPanel(
"threeDplot",
titlePanel("movie recommandations"),
sidebarLayout(
sidebarPanel(
selectInput("movie", label = "Please select a movie", choices = data$title, selected = "Deadpool 2")
),
mainPanel(plotlyOutput("threeDplot"))
)
)
))
runApp()
setwd("C:/Users/Amirm/OneDrive/DOC/University_of_Washington/Spring_2018/INFO 201/info/Final-Project")
styler:::style_active_file()
