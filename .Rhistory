)
)
))
library(plotly)
install.packages("plotly")
runApp()
library(plotly)
remove.packages(plotly, lib)
remove.packages(plotly)
remove.packages("plotly", lib)
remove.packages("plotly")
install.packages("plotly")
library(plotly)
uninstall.packages(c("plotly", "plyr"))
uninstall.packages(c("plotly", "plyr"))
library(plotly)
shiny::runApp()
runApp()
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("scripts/api.R")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv(file = "data/tmdb_data.csv")
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
# Returns movie recommendation based on the movie name and maximum of 20
# recommendation
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(movie_name){
dataset <- get_data(movie_name)
p <- plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
return(p)
}
setwd("~/Desktop/info201/Final-Project/scripts")
three_d_rec("Zootopia")
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("scripts/api.R")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv(file = "data/tmdb_data.csv")
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
# Returns movie recommendation based on the movie name and maximum of 20
# recommendation
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(movie_name){
dataset <- get_data(movie_name)
plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
}
three_d_rec("Zootopia")
runApp('~/Desktop/info201/Final-Project')
data <- read.csv(file = "data/tmdb_data.csv")
setwd("~/Desktop/info201/Final-Project/scripts")
data <- read.csv(file = "data/tmdb_data.csv")
data <- read.csv(file = "data/tmdb_data.csv")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv(file = "data/tmdb_data.csv")
data <- read.csv(file = "../data/tmdb_data.csv")
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
setwd("~/Desktop/info201/Final-Project")
data <- read.csv("../data/tmdb_data.csv", stringsAsFactors = FALSE)
data <- read.csv("./data/tmdb_data.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/info201/Final-Project/scripts")
runApp('~/Desktop/info201/Final-Project')
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/info201/Final-Project/scripts")
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("scripts/api.R")
source("api.R")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("./data/tmdb_data.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/info201/Final-Project/scripts")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("./data/tmdb_data.csv", stringsAsFactors = FALSE)
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("../data/tmdb_data.csv", stringsAsFactors = FALSE)
source("api.R")
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("../data/tmdb_data.csv", stringsAsFactors = FALSE)
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
# Returns movie recommendation based on the movie name and maximum of 20
# recommendation
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(movie_name){
dataset <- get_data(movie_name)
plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
}
three_d_rec("Deadpool 2")
setwd("~/Desktop/info201/Final-Project")
runApp()
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("scripts/api.R")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
# Returns movie recommendation based on the movie name and maximum of 20
# recommendation
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(movie_name){
dataset <- get_data(movie_name)
plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
get_data('Inception')
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(body$results)
}
get_data('Inception')
api_key
get_data('Coco')
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
id_finder('Coco')
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
id_finder('Coco')
get_data('Coco')
get_data('Coco') %>% is.data.frame
get_data('Coco') %>% View
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(movie_name){
dataset <- get_data(movie_name)
plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
}
three_d_rec('Coco')
runApp()
?plot_ly
is.data.frame(get_data('Coco'))
get_data('Coco') %>% is.data.frame
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(body$results)
}
get_data('Coco')
api_key <- "d0c718e2a61b92b6173965005833dea8"
get_data('Coco')
get_data('Coco') %>% is.data.frame
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(movie_name){
dataset <- get_data(movie_name)
plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
}
three_d_rec('Coco')
runApp()
get_data('Coco') %>% is.data.frame
runApp()
get_data('Coco') %>% View
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(as.data.frame(body$results))
}
get_data('Coco')
data
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(as.data.frame(body$results))
}
get_data('Coco')
get_data('Coco') %>% colnames
runApp()
get_data('Coco')
shiny::runApp()
get_data('Coco')
setwd("~/Desktop/info201/Final-Project/scripts")
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
?file.exists
setwd("~/Desktop/info201/Final-Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/info201/Final-Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/info201/Final-Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
