<<<<<<< HEAD
if (genre != "") {
genre <- as.character(genre_list[genre_list$name == genre,]$id)
}
new_data <- dataset %>%
filter(release_year >= year_start & release_year <= year_end) %>%
filter(grepl(genre, genre_ids)) %>%
filter(vote_average >= rating_low & vote_average <= rating_high)
# scatter plot
plot_ly(new_data, x = ~release_year, y = ~vote_average, text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average),
color = ~original_language,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, xmax), title = "Release Year"),
yaxis = list(range = c(0, ymax), title = "Vote Average")
) %>%
return()
}
scatter_plot(data, 1930, 2020, "", 0, 10)
scatter_plot <- function(dataset, year_start, year_end, genre, rating_low, rating_high) {
# create new column called "release_year", get rid of NA for "release_year" column
dataset$release_year <- as.numeric(format(as.Date(dataset$release_date, "%Y-%m-%d"), "%Y"))
completeVec <- complete.cases(dataset[, "release_year"])
dataset <- dataset[completeVec,]
# get genre list
response <- GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
# max for x-axis and y-axis
xmax <- max(dataset$release_year)
ymax <- max(dataset$vote_average)
# filter dataset
if (genre != "") {
genre <- as.character(genre_list[genre_list$name == genre,]$id)
}
new_data <- dataset %>%
filter(release_year >= year_start & release_year <= year_end) %>%
filter(grepl(genre, genre_ids)) %>%
filter(vote_average >= rating_low & vote_average <= rating_high)
# scatter plot
plot_ly(new_data, x = ~release_year, y = ~vote_average,
text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ", original_language),
color = ~original_language,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, xmax), title = "Release Year"),
yaxis = list(range = c(0, ymax), title = "Vote Average")
) %>%
return()
}
scatter_plot(data, 1930, 2020, "", 0, 10)
scatter_plot <- function(dataset, year_start, year_end, genre, rating_low, rating_high) {
# create new column called "release_year", get rid of NA for "release_year" column
dataset$release_year <- as.numeric(format(as.Date(dataset$release_date, "%Y-%m-%d"), "%Y"))
completeVec <- complete.cases(dataset[, "release_year"])
dataset <- dataset[completeVec,]
# get genre list
response <- GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
# max for x-axis and y-axis
xmax <- max(dataset$release_year)
ymax <- max(dataset$vote_average)
# filter dataset
if (genre != "") {
genre <- as.character(genre_list[genre_list$name == genre,]$id)
}
new_data <- dataset %>%
filter(release_year >= year_start & release_year <= year_end) %>%
filter(grepl(genre, genre_ids)) %>%
filter(vote_average >= rating_low & vote_average <= rating_high)
# scatter plot
plot_ly(new_data, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ", original_language),
color = ~original_language,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, xmax), title = "Release Year"),
yaxis = list(range = c(0, ymax), title = "Vote Average")
) %>%
return()
}
scatter_plot(data, 1930, 2020, "", 0, 10)
scatter_plot(data, 2017, 2020, "", 0, 10)
response <- GET(https://api.themoviedb.org/3/configuration/languages?api_key=<<api_key>>
)
response <- GET(https://api.themoviedb.org/3/configuration/languages?api_key=d0c718e2a61b92b6173965005833dea8)
response <- GET("https://api.themoviedb.org/3/configuration/languages?api_key=d0c718e2a61b92b6173965005833dea8")
response_content <- content(response, type = "text")
test <- fromJSON(response_content)
View(test)
test[test$iso_639_1 == "cn",]$english_name
scatter_plot <- function(dataset, year_start, year_end, genre, rating_low, rating_high) {
# create new column called "release_year", get rid of NA for "release_year" column
dataset$release_year <- as.numeric(format(as.Date(dataset$release_date, "%Y-%m-%d"), "%Y"))
completeVec <- complete.cases(dataset[, "release_year"])
dataset <- dataset[completeVec,]
# get genre list
response <- GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
response_ <- GET(paste0("https://api.themoviedb.org/3/configuration/languages?api_key=", api_key))
response_content_ <- content(response_, type = "text")
language_list <- fromJSON(response_content_)
# max for x-axis and y-axis
xmax <- max(dataset$release_year)
ymax <- max(dataset$vote_average)
# filter dataset
if (genre != "") {
genre <- as.character(genre_list[genre_list$name == genre,]$id)
}
new_data <- dataset %>%
filter(release_year >= year_start & release_year <= year_end) %>%
filter(grepl(genre, genre_ids)) %>%
filter(vote_average >= rating_low & vote_average <= rating_high)
language <- language_list[language_list$iso_639_1 == original_language,]$english_name
# scatter plot
plot_ly(new_data, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ", language),
color = ~original_language,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, xmax), title = "Release Year"),
yaxis = list(range = c(0, ymax), title = "Vote Average")
) %>%
return()
}
test <- scatter_plot(data, 1930, 2018, "", 0, 10)
scatter_plot <- function(dataset, year_start, year_end, genre, rating_low, rating_high) {
# create new column called "release_year", get rid of NA for "release_year" column
dataset$release_year <- as.numeric(format(as.Date(dataset$release_date, "%Y-%m-%d"), "%Y"))
completeVec <- complete.cases(dataset[, "release_year"])
dataset <- dataset[completeVec,]
# get genre list
response <- GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
response_ <- GET(paste0("https://api.themoviedb.org/3/configuration/languages?api_key=", api_key))
response_content_ <- content(response_, type = "text")
language_list <- fromJSON(response_content_)
# max for x-axis and y-axis
xmax <- max(dataset$release_year)
ymax <- max(dataset$vote_average)
# filter dataset
if (genre != "") {
genre <- as.character(genre_list[genre_list$name == genre,]$id)
}
new_data <- dataset %>%
filter(release_year >= year_start & release_year <= year_end) %>%
filter(grepl(genre, genre_ids)) %>%
filter(vote_average >= rating_low & vote_average <= rating_high)
# scatter plot
plot_ly(new_data, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
language_list[language_list$iso_639_1 == original_language,]$english_name),
color = ~original_language,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, xmax), title = "Release Year"),
yaxis = list(range = c(0, ymax), title = "Vote Average")
) %>%
return()
}
test <- scatter_plot(data, 1930, 2018, "", 0, 10)
=======
)
)
))
library(plotly)
install.packages("plotly")
runApp()
library(plotly)
remove.packages(plotly, lib)
remove.packages(plotly)
remove.packages("plotly", lib)
remove.packages("plotly")
install.packages("plotly")
library(plotly)
uninstall.packages(c("plotly", "plyr"))
uninstall.packages(c("plotly", "plyr"))
library(plotly)
shiny::runApp()
runApp()
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("scripts/api.R")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv(file = "data/tmdb_data.csv")
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
# Returns movie recommendation based on the movie name and maximum of 20
# recommendation
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(movie_name){
dataset <- get_data(movie_name)
p <- plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
return(p)
}
setwd("~/Desktop/info201/Final-Project/scripts")
three_d_rec("Zootopia")
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("scripts/api.R")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv(file = "data/tmdb_data.csv")
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
# Returns movie recommendation based on the movie name and maximum of 20
# recommendation
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(movie_name){
dataset <- get_data(movie_name)
plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
}
three_d_rec("Zootopia")
runApp('~/Desktop/info201/Final-Project')
data <- read.csv(file = "data/tmdb_data.csv")
setwd("~/Desktop/info201/Final-Project/scripts")
data <- read.csv(file = "data/tmdb_data.csv")
data <- read.csv(file = "data/tmdb_data.csv")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv(file = "data/tmdb_data.csv")
data <- read.csv(file = "../data/tmdb_data.csv")
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
setwd("~/Desktop/info201/Final-Project")
data <- read.csv("../data/tmdb_data.csv", stringsAsFactors = FALSE)
data <- read.csv("./data/tmdb_data.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/info201/Final-Project/scripts")
runApp('~/Desktop/info201/Final-Project')
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/info201/Final-Project/scripts")
>>>>>>> 2e8c9589f6a26032e6ee57110064b9fe37912d7f
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
<<<<<<< HEAD
source("api.R")
scatter_plot <- function(dataset, year_start, year_end, genre, rating_low, rating_high) {
# create new column called "release_year", get rid of NA for "release_year" column
dataset$release_year <- as.numeric(format(as.Date(dataset$release_date, "%Y-%m-%d"), "%Y"))
completeVec <- complete.cases(dataset[, "release_year"])
dataset <- dataset[completeVec,]
# get genre list
response <- GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
response_ <- GET(paste0("https://api.themoviedb.org/3/configuration/languages?api_key=", api_key))
response_content_ <- content(response_, type = "text")
language_list <- fromJSON(response_content_)
# max for x-axis and y-axis
xmax <- max(dataset$release_year)
ymax <- max(dataset$vote_average)
# filter dataset
if (genre != "") {
genre <- as.character(genre_list[genre_list$name == genre,]$id)
}
new_data <- dataset %>%
filter(release_year >= year_start & release_year <= year_end) %>%
filter(grepl(genre, genre_ids)) %>%
filter(vote_average >= rating_low & vote_average <= rating_high)
# scatter plot
plot_ly(new_data, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
language_list[language_list$iso_639_1 == original_language,]$english_name),
color = ~original_language,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, xmax), title = "Release Year"),
yaxis = list(range = c(0, ymax), title = "Vote Average")
) %>%
return()
}
test <- scatter_plot(data, 1930, 2018, "", 0, 10)
test <- scatter_plot(data, 2015, 2018, "", 0, 10)
response_ <- GET(paste0("https://api.themoviedb.org/3/configuration/languages?api_key=", api_key))
response_content_ <- content(response_, type = "text")
language_list <- fromJSON(response_content_)
scatter_plot <- function(dataset, year_start, year_end, genre, rating_low, rating_high) {
# create new column called "release_year", get rid of NA for "release_year" column
dataset$release_year <- as.numeric(format(as.Date(dataset$release_date, "%Y-%m-%d"), "%Y"))
completeVec <- complete.cases(dataset[, "release_year"])
dataset <- dataset[completeVec,]
# get genre list
response <- GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
response_ <- GET(paste0("https://api.themoviedb.org/3/configuration/languages?api_key=", api_key))
response_content_ <- content(response_, type = "text")
language_list <- fromJSON(response_content_)
# max for x-axis and y-axis
xmax <- max(dataset$release_year)
ymax <- max(dataset$vote_average)
# filter dataset
if (genre != "") {
genre <- as.character(genre_list[genre_list$name == genre,]$id)
}
new_data <- dataset %>%
filter(release_year >= year_start & release_year <= year_end) %>%
filter(grepl(genre, genre_ids)) %>%
filter(vote_average >= rating_low & vote_average <= rating_high)
}
test <- scatter_plot(data, 1930, 2020, "", 0, 10)
plot_ly(test, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
language_list[language_list$iso_639_1 == original_language,]$english_name),
color = ~original_language,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, xmax), title = "Release Year"),
yaxis = list(range = c(0, ymax), title = "Vote Average")
)
plot_ly(test, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
language_list[language_list$iso_639_1 == original_language,]$english_name),
color = ~original_language,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, 2020), title = "Release Year"),
yaxis = list(range = c(0, 10), title = "Vote Average")
)
response_ <- GET(paste0("https://api.themoviedb.org/3/configuration/languages?api_key=", api_key))
response_content_ <- content(response_, type = "text")
language_list <- fromJSON(response_content_)
View(language_list)
language_list[language_list$iso_639_1 == "en",]$english_name
plot_ly(test, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
language_list[language_list$iso_639_1 == original_language,]$english_name),
color = ~original_language,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, 2020), title = "Release Year"),
yaxis = list(range = c(0, 10), title = "Vote Average")
)
plot_ly(new_data, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
original_language),
color = ~original_language,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, xmax), title = "Release Year"),
yaxis = list(range = c(0, ymax), title = "Vote Average")
)
plot_ly(test, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
original_language),
color = ~original_language,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, 2020), title = "Release Year"),
yaxis = list(range = c(0, 10), title = "Vote Average")
)
test$language_name <- language_list[language_list$iso_639_1 == test$original_language,]$english_name
language_list$original_language <- language_list$iso_639_1
View(language_list)
language <- language_list %>% select(original_language, english_name)
View(language)
full_join(test, language)
View(full_join(test, language))
scatter_plot <- function(dataset, year_start, year_end, genre, rating_low, rating_high) {
# create new column called "release_year", get rid of NA for "release_year" column
dataset$release_year <- as.numeric(format(as.Date(dataset$release_date, "%Y-%m-%d"), "%Y"))
completeVec <- complete.cases(dataset[, "release_year"])
dataset <- dataset[completeVec,]
# get genre list
response <- GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
# get language list
response_ <- GET(paste0("https://api.themoviedb.org/3/configuration/languages?api_key=", api_key))
response_content_ <- content(response_, type = "text")
language_list <- fromJSON(response_content_)
language_list$original_language <- language_list$iso_639_1
language <- language_list %>% select(original_language, english_name)
dataset <- full_join(dataset, language)
# max for x-axis and y-axis
xmax <- max(dataset$release_year)
ymax <- max(dataset$vote_average)
# filter dataset
if (genre != "") {
genre <- as.character(genre_list[genre_list$name == genre,]$id)
}
new_data <- dataset %>%
filter(release_year >= year_start & release_year <= year_end) %>%
filter(grepl(genre, genre_ids)) %>%
filter(vote_average >= rating_low & vote_average <= rating_high)
# scatter plot
plot_ly(new_data, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
english_name),
color = ~original_language,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, xmax), title = "Release Year"),
yaxis = list(range = c(0, ymax), title = "Vote Average")
) %>%
return()
}
test <- scatter_plot(data, 1930, 2020, "", 0, 10)
=======
source("scripts/api.R")
source("api.R")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("./data/tmdb_data.csv", stringsAsFactors = FALSE)
setwd("~/Desktop/info201/Final-Project/scripts")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("./data/tmdb_data.csv", stringsAsFactors = FALSE)
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("../data/tmdb_data.csv", stringsAsFactors = FALSE)
source("api.R")
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("../data/tmdb_data.csv", stringsAsFactors = FALSE)
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
# Returns movie recommendation based on the movie name and maximum of 20
# recommendation
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(movie_name){
dataset <- get_data(movie_name)
plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
}
three_d_rec("Deadpool 2")
setwd("~/Desktop/info201/Final-Project")
runApp()
>>>>>>> 2e8c9589f6a26032e6ee57110064b9fe37912d7f
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
<<<<<<< HEAD
source("api.R")
test <- scatter_plot(data, 1930, 2020, "", 0, 10)
scatter_plot <- function(dataset, year_start, year_end, genre, rating_low, rating_high) {
# create new column called "release_year", get rid of NA for "release_year" column
dataset$release_year <- as.numeric(format(as.Date(dataset$release_date, "%Y-%m-%d"), "%Y"))
completeVec <- complete.cases(dataset[, "release_year"])
dataset <- dataset[completeVec,]
# get genre list
response <- GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
# get language list
response_ <- GET(paste0("https://api.themoviedb.org/3/configuration/languages?api_key=", api_key))
response_content_ <- content(response_, type = "text")
language_list <- fromJSON(response_content_)
language_list$original_language <- language_list$iso_639_1
language <- language_list %>% select(original_language, english_name)
dataset <- full_join(dataset, language)
# max for x-axis and y-axis
xmax <- max(dataset$release_year)
ymax <- max(dataset$vote_average)
# filter dataset
if (genre != "") {
genre <- as.character(genre_list[genre_list$name == genre,]$id)
}
new_data <- dataset %>%
filter(release_year >= year_start & release_year <= year_end) %>%
filter(grepl(genre, genre_ids)) %>%
filter(vote_average >= rating_low & vote_average <= rating_high)
}
test <- scatter_plot(data, 1930, 2020, "", 0, 10)
plot_ly(test, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
english_name),
color = ~original_language,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, 2020), title = "Release Year"),
yaxis = list(range = c(0, 10), title = "Vote Average")
)
plot_ly(test, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
english_name),
color = ~english_name,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, 2020), title = "Release Year"),
yaxis = list(range = c(0, 10), title = "Vote Average")
)
View(test)
plot_ly(test, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, " (", original_title, ")", "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
english_name),
color = ~english_name,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, 2020), title = "Release Year"),
yaxis = list(range = c(0, 10), title = "Vote Average")
)
response <- GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
View(genre_list)
runApp('~/Documents/INFO201/Final-Project')
runApp('~/Documents/INFO201/Final-Project')
runApp('~/Documents/INFO201/Final-Project')
runApp('~/Documents/INFO201/Final-Project')
runApp('~/Documents/INFO201/Final-Project')
runApp('~/Documents/INFO201/Final-Project')
runApp('~/Documents/INFO201/Final-Project')
runApp('~/Documents/INFO201/Final-Project')
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
data <- read.csv("./data/tmdb_data.csv", stringsAsFactors = FALSE)
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
setwd("~/Documents/INFO201/Final-Project/scripts")
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
data <- read.csv("./data/tmdb_data.csv", stringsAsFactors = FALSE)
> setwd("~/Documents/INFO201/Final-Project")
setwd("~/Documents/INFO201/Final-Project")
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
a <- ymd(data$release_date)
data$release_year <- year(a)
View(data)
=======
source("scripts/api.R")
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
# Returns movie recommendation based on the movie name and maximum of 20
# recommendation
recommendation <- function(movie_name, count) {
body <- get_data(movie_name)
if(count > 20){
return(body[["results"]][["original_title"]])
}else{
return(head(body[["results"]][["original_title"]], count))
}
}
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(movie_name){
dataset <- get_data(movie_name)
plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(flatten(body$results))
}
get_data('Inception')
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(body$results)
}
get_data('Inception')
api_key
get_data('Coco')
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
id_finder('Coco')
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
id_finder('Coco')
get_data('Coco')
get_data('Coco') %>% is.data.frame
get_data('Coco') %>% View
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(movie_name){
dataset <- get_data(movie_name)
plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
}
three_d_rec('Coco')
runApp()
?plot_ly
is.data.frame(get_data('Coco'))
get_data('Coco') %>% is.data.frame
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(body$results)
}
get_data('Coco')
api_key <- "d0c718e2a61b92b6173965005833dea8"
get_data('Coco')
get_data('Coco') %>% is.data.frame
# returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(movie_name){
dataset <- get_data(movie_name)
plot_ly(dataset, x = ~vote_count, y = ~vote_average, z = ~release_date,
text = ~original_title,
marker = list(color = ~vote_average, colorscale = c('#FFE1A1', '#683531'),
showscale = TRUE)) %>%
add_markers() %>%
layout(title = "Recommendation Analysis", scene = list(scene="amir",
xaxis = list(title = 'Vote Average'),
yaxis = list(title = 'Vote Count'),
zaxis = list(title = 'Date')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'Vote Average',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
}
three_d_rec('Coco')
runApp()
get_data('Coco') %>% is.data.frame
runApp()
get_data('Coco') %>% View
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(as.data.frame(body$results))
}
get_data('Coco')
data
# Reads in the tmbd data file --------------------------------------------
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
# GIven a movie name, will find the id of that movie ----------------------
id_finder <- function(movie_name){
movie <- filter(data, title == movie_name)
return(movie$id)
}
# Based on a given movie name, gets movie recommendation data -------------
get_data <- function(movie_name){
movie_id <- id_finder(movie_name)
url <- paste0("https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
return(as.data.frame(body$results))
}
get_data('Coco')
get_data('Coco') %>% colnames
runApp()
get_data('Coco')
shiny::runApp()
get_data('Coco')
setwd("~/Desktop/info201/Final-Project/scripts")
runApp('~/Desktop/info201/Final-Project')
runApp('~/Desktop/info201/Final-Project')
?file.exists
setwd("~/Desktop/info201/Final-Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/info201/Final-Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/info201/Final-Project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> 2e8c9589f6a26032e6ee57110064b9fe37912d7f
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
a <- ymd(data$release_date)
data$release_year <- year(a)
data <- arrange(release_year)
library(lubridate)
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
a <- ymd(data$release_date)
data$release_year <- year(a)
data <- arrange(release_year)
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
a <- ymd(data$release_date)
data$release_year <- year(a)
data <- arrange(data, release_year)
View(data)
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
a <- ymd(data$release_date)
data$release_year <- year(a)
data <- arrange(data, -release_year)
View(data)
=======
>>>>>>> 2e8c9589f6a26032e6ee57110064b9fe37912d7f
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
scatter_plot <- function(dataset, year_start, year_end, genre, rating_low, rating_high) {
# create new column called "release_year", get rid of NA for "release_year" column
dataset$release_year <- as.numeric(format(as.Date(dataset$release_date, "%Y-%m-%d"), "%Y"))
completeVec <- complete.cases(dataset[, "release_year"])
dataset <- dataset[completeVec,]
# get genre list
response <- GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
# get language list
response_ <- GET(paste0("https://api.themoviedb.org/3/configuration/languages?api_key=", api_key))
response_content_ <- content(response_, type = "text")
language_list <- fromJSON(response_content_)
# join dataset with language list
language_list$original_language <- language_list$iso_639_1
language <- language_list %>% select(original_language, english_name)
dataset <- full_join(dataset, language)
# max for x-axis and y-axis
xmax <- max(dataset$release_year)
ymax <- max(dataset$vote_average)
# filter dataset
if (genre != "") {
genre <- as.character(genre_list[genre_list$name == genre,]$id)
}
new_data <- dataset %>%
filter(release_year >= year_start & release_year <= year_end) %>%
filter(grepl(genre, genre_ids)) %>%
filter(vote_average >= rating_low & vote_average <= rating_high)
# scatter plot
plot_ly(new_data, x = ~release_year, y = ~vote_average, hoverinfo = "text",
text = ~paste("Movie: ", title, " (", original_title, ")", "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
english_name),
color = ~english_name,
mode = "markers", marker = list(opacity = .7, size = 10)) %>%
layout(title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, xmax), title = "Release Year"),
yaxis = list(range = c(0, ymax), title = "Vote Average")
) %>%
return()
}
source("./scripts/scatter_plot.R")
source("./scripts/movie.R")
source("./scripts/scatter_plot.R")
source("scripts/scatter_plot.R")
=======
>>>>>>> 2e8c9589f6a26032e6ee57110064b9fe37912d7f
