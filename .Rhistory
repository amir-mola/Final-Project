# number of freshman who want to apply to info
ret$freshman_want_apply_info <-
round(length(which(freshman$Are.you.interested.in.applying.to.the.Informatics.major. == "Yes"))/nrow(freshman) * 100)
# operating system in which freshman use the most
ret$most_system <- max(length(which(freshman$What.operating.system.do.you.typically.use. == "Windows")),
length(which(freshman$What.operating.system.do.you.typically.use. == "Mac")))
return(ret)
}
test <- summary(survey)
View(test)
View(test)
class <- survey %>%
group_by(What.is.your.current.class.standing.) %>%
summarise(population = n())
View(class)
sum(class$population)
summary <- function(dataset) {
ret <- list()
# number of students participate in the survey
ret$rownum <- nrow(dataset)
# number of questions in the survey
ret$colnum <- ncol(dataset)
# freshman dataset
class <- dataset %>%
group_by(What.is.your.current.class.standing.) %>%
summarise(population = n())
ret$freshman <- length(which(class$What.is.your.current.class.standing.))/sum(class$population)
return(ret)
}
test <- summary(survey)
summary <- function(dataset) {
ret <- list()
# number of students participate in the survey
ret$rownum <- nrow(dataset)
# number of questions in the survey
ret$colnum <- ncol(dataset)
# freshman dataset
class <- dataset %>%
group_by(What.is.your.current.class.standing.) %>%
summarise(population = n())
ret$freshman <-
length(which(class$What.is.your.current.class.standing. == "Freshman"))/sum(class$population)
return(ret)
}
test <- summary(survey)
View(test)
class[class$What.is.your.current.class.standing. == "Freshman", class$population]
class$population
class[class$population, class$What.is.your.current.class.standing. == "Freshman"]
class[class$What.is.your.current.class.standing. == "Freshman", ]
class[class$What.is.your.current.class.standing. == "Freshman", ]$population
length(which(class$What.is.your.current.class.standing. == "Freshman"))
length(which(survey$What.is.your.current.class.standing. == "Freshman"))
length(which(survey$What.is.your.current.class.standing. == "Freshman"))/nrow(survey)
round(length(which(survey$What.is.your.current.class.standing. == "Freshman"))/nrow(survey)*100)
summary <- function(dataset) {
ret <- list()
# number of students participate in the survey
ret$rownum <- nrow(dataset)
# number of questions in the survey
ret$colnum <- ncol(dataset)
# freshman population percentage
ret$percent_freshman <-
round(length(which(dataset$What.is.your.current.class.standing. == "Freshman"))/nrow(dataset)*100)
# sophomore population percentage
ret$percent_sophomore <-
round(length(which(dataset$What.is.your.current.class.standing. == "Sophomore"))/nrow(dataset)*100)
# junior population percentage
ret$percent_junior <-
round(length(which(dataset$What.is.your.current.class.standing. == "Junior"))/nrow(dataset)*100)
# senior population percentage
ret$percent_senior <-
round(length(which(dataset$What.is.your.current.class.standing. == "Senior"))/nrow(dataset)*100)
return(ret)
}
test <- summary(survey)
View(test)
summary <- function(dataset) {
ret <- list()
# number of students participate in the survey
ret$rownum <- nrow(dataset)
# number of questions in the survey
ret$colnum <- ncol(dataset)
# freshman population percentage
ret$percent_freshman <-
round(length(which(dataset$What.is.your.current.class.standing. == "Freshman"))/nrow(dataset)*100)
# sophomore population percentage
ret$percent_sophomore <-
round(length(which(dataset$What.is.your.current.class.standing. == "Sophomore"))/nrow(dataset)*100)
# junior population percentage
ret$percent_junior <-
round(length(which(dataset$What.is.your.current.class.standing. == "Junior"))/nrow(dataset)*100)
# senior population percentage
ret$percent_senior <-
round(length(which(dataset$What.is.your.current.class.standing. == "Senior"))/nrow(dataset)*100)
# percentage of students want to apply to info
ret$percent_info <-
round(length(which(dataset$Are.you.interested.in.applying.to.the.Informatics.major. == "Yes"))/nrow(dataset)*100)
# percentage of students using Windows
ret$percent_windows <-
round(length(which(dataset$What.operating.system.do.you.typically.use. == "Windows"))/nrow(dataset)*100)
# percentage of students using Mac
ret$percent_mac <-
round(length(which(dataset$What.operating.system.do.you.typically.use. == "Mac"))/nrow(dataset)*100)
return(ret)
}
test <- summary(survey)
View(test)
summary <- function(dataset) {
ret <- list()
# number of students participate in the survey
ret$rownum <- nrow(dataset)
# number of questions in the survey
ret$colnum <- ncol(dataset)
# freshman population percentage
ret$percent_freshman <-
round(length(which(dataset$What.is.your.current.class.standing. == "Freshman"))/nrow(dataset)*100)
# sophomore population percentage
ret$percent_sophomore <-
round(length(which(dataset$What.is.your.current.class.standing. == "Sophomore"))/nrow(dataset)*100)
# junior population percentage
ret$percent_junior <-
round(length(which(dataset$What.is.your.current.class.standing. == "Junior"))/nrow(dataset)*100)
# senior population percentage
ret$percent_senior <-
round(length(which(dataset$What.is.your.current.class.standing. == "Senior"))/nrow(dataset)*100)
# percentage of students want to apply to info
ret$percent_info <-
round(length(which(dataset$Are.you.interested.in.applying.to.the.Informatics.major. == "Yes"))/nrow(dataset)*100)
# percentage of students using Windows
ret$percent_windows <-
round(length(which(dataset$What.operating.system.do.you.typically.use. == "Windows"))/nrow(dataset)*100)
# percentage of students using Mac
ret$percent_mac <-
round(length(which(dataset$What.operating.system.do.you.typically.use. == "Mac"))/nrow(dataset)*100)
# percentage of students born in WA
ret$born_wa <-
round(length(which(dataset$Were.you.born.in.Washington.state. == "Yes"))/nrow(dataset)*100)
return(ret)
}
test <- summary(survey)
View(test)
population <- survey %>%
group_by(What.is.your.current.class.standing.) %>%
summarise(population = n())
View(population)
population <- survey %>%
group_by(What.is.your.current.class.standing.) %>%
summarise(class_population = n())
View(population)
sum(population$class_population)
population$class_population
population[What.is.your.current.class.standing. == "Sophomore", "class_population"]
population[population$What.is.your.current.class.standing. == "Sophomore", population$class_population]
population[population$What.is.your.current.class.standing. == "Sophomore", ]
summary <- function(dataset) {
ret <- list()
# number of students participate in the survey
ret$rownum <- nrow(dataset)
# number of questions in the survey
ret$colnum <- ncol(dataset)
population <- dataset %>%
group_by(What.is.your.current.class.standing.) %>%
summarise(class_population = n())
# freshman population percentage
ret$percent_freshman <-
round(population[population$What.is.your.current.class.standing. == "freshman", ]$class_population/nrow(dataset)*100)
# sophomore population percentage
ret$percent_sophomore <-
round(population[population$What.is.your.current.class.standing. == "Sophomore", ]/nrow(dataset)*100)
# junior population percentage
ret$percent_junior <-
round(population[population$What.is.your.current.class.standing. == "Junior", ]/nrow(dataset)*100)
# senior population percentage
ret$percent_senior <-
round(population[population$What.is.your.current.class.standing. == "Senior", ]/nrow(dataset)*100)
# percentage of students want to apply to info
ret$percent_info <-
round(length(which(dataset$Are.you.interested.in.applying.to.the.Informatics.major. == "Yes"))/nrow(dataset)*100)
# percentage of students using Windows
ret$percent_windows <-
round(length(which(dataset$What.operating.system.do.you.typically.use. == "Windows"))/nrow(dataset)*100)
# percentage of students using Mac
ret$percent_mac <-
round(length(which(dataset$What.operating.system.do.you.typically.use. == "Mac"))/nrow(dataset)*100)
# percentage of students born in WA
ret$born_wa <-
round(length(which(dataset$Were.you.born.in.Washington.state. == "Yes"))/nrow(dataset)*100)
return(ret)
}
test <- summary(survey)
summary <- function(dataset) {
ret <- list()
# number of students participate in the survey
ret$rownum <- nrow(dataset)
# number of questions in the survey
ret$colnum <- ncol(dataset)
population <- dataset %>%
group_by(What.is.your.current.class.standing.) %>%
summarise(class_population = n())
# freshman population percentage
ret$percent_freshman <-
round(population[population$What.is.your.current.class.standing. == "freshman", ]$class_population/nrow(dataset)*100)
# sophomore population percentage
ret$percent_sophomore <-
round(population[population$What.is.your.current.class.standing. == "Sophomore", ]$class_population/nrow(dataset)*100)
# junior population percentage
ret$percent_junior <-
round(population[population$What.is.your.current.class.standing. == "Junior", ]$class_population/nrow(dataset)*100)
# senior population percentage
ret$percent_senior <-
round(population[population$What.is.your.current.class.standing. == "Senior", ]$class_population/nrow(dataset)*100)
# percentage of students want to apply to info
ret$percent_info <-
round(length(which(dataset$Are.you.interested.in.applying.to.the.Informatics.major. == "Yes"))/nrow(dataset)*100)
# percentage of students using Windows
ret$percent_windows <-
round(length(which(dataset$What.operating.system.do.you.typically.use. == "Windows"))/nrow(dataset)*100)
# percentage of students using Mac
ret$percent_mac <-
round(length(which(dataset$What.operating.system.do.you.typically.use. == "Mac"))/nrow(dataset)*100)
# percentage of students born in WA
ret$born_wa <-
round(length(which(dataset$Were.you.born.in.Washington.state. == "Yes"))/nrow(dataset)*100)
return(ret)
}
test <- summary(survey)
View(test)
population[population$What.is.your.current.class.standing. == "Senior", ]$class_population
round(length(which(survey$Are.you.interested.in.applying.to.the.Informatics.major. == "Yes"))/nrow(survey)*100)
View(test)
View(test)
round(population[population$What.is.your.current.class.standing. == "freshman", ]$class_population/nrow(dataset)*100)
round(population[population$What.is.your.current.class.standing. == "freshman", ]$class_population/nrow(survey)*100)
summary <- function(dataset) {
ret <- list()
# number of students participate in the survey
ret$rownum <- nrow(dataset)
# number of questions in the survey
ret$colnum <- ncol(dataset)
population <- dataset %>%
group_by(What.is.your.current.class.standing.) %>%
summarise(class_population = n())
# freshman population percentage
ret$percent_freshman <-
round(population[population$What.is.your.current.class.standing. == "Freshman", ]$class_population/nrow(dataset)*100)
# sophomore population percentage
ret$percent_sophomore <-
round(population[population$What.is.your.current.class.standing. == "Sophomore", ]$class_population/nrow(dataset)*100)
# junior population percentage
ret$percent_junior <-
round(population[population$What.is.your.current.class.standing. == "Junior", ]$class_population/nrow(dataset)*100)
# senior population percentage
ret$percent_senior <-
round(population[population$What.is.your.current.class.standing. == "Senior", ]$class_population/nrow(dataset)*100)
# percentage of students want to apply to info
ret$percent_info <-
round(length(which(dataset$Are.you.interested.in.applying.to.the.Informatics.major. == "Yes"))/nrow(dataset)*100)
# percentage of students using Windows
ret$percent_windows <-
round(length(which(dataset$What.operating.system.do.you.typically.use. == "Windows"))/nrow(dataset)*100)
# percentage of students using Mac
ret$percent_mac <-
round(length(which(dataset$What.operating.system.do.you.typically.use. == "Mac"))/nrow(dataset)*100)
# percentage of students born in WA
ret$born_wa <-
round(length(which(dataset$Were.you.born.in.Washington.state. == "Yes"))/nrow(dataset)*100)
return(ret)
}
test <- summary(survey)
View(test)
summary <- function(dataset) {
ret <- list()
# number of students participate in the survey
ret$rownum <- nrow(dataset)
# number of questions in the survey
ret$colnum <- ncol(dataset)
population <- dataset %>%
group_by(What.is.your.current.class.standing.) %>%
summarise(class_population = n())
# freshman population percentage
ret$percent_freshman <-
round(population[population$What.is.your.current.class.standing. == "Freshman", ]$class_population/nrow(dataset)*100)
# sophomore population percentage
ret$percent_sophomore <-
round(population[population$What.is.your.current.class.standing. == "Sophomore", ]$class_population/nrow(dataset)*100)
# junior population percentage
ret$percent_junior <-
round(population[population$What.is.your.current.class.standing. == "Junior", ]$class_population/nrow(dataset)*100)
# senior population percentage
ret$percent_senior <-
round(population[population$What.is.your.current.class.standing. == "Senior", ]$class_population/nrow(dataset)*100)
# percentage of students want to apply to info
apply_info <- dataset %>%
select(Are.you.interested.in.applying.to.the.Informatics.major.) %>%
filter(Are.you.interested.in.applying.to.the.Informatics.major. == "Yes")
ret$percent_info <-
round(nrow(apply_info)/nrow(dataset)*100)
# percentage of students using Windows
ret$percent_windows <-
round(length(which(dataset$What.operating.system.do.you.typically.use. == "Windows"))/nrow(dataset)*100)
# percentage of students using Mac
ret$percent_mac <-
round(length(which(dataset$What.operating.system.do.you.typically.use. == "Mac"))/nrow(dataset)*100)
# percentage of students born in WA
ret$born_wa <-
round(length(which(dataset$Were.you.born.in.Washington.state. == "Yes"))/nrow(dataset)*100)
return(ret)
}
test <- summary(survey)
View(test)
summary <- function(dataset) {
ret <- list()
# number of students participate in the survey
ret$rownum <- nrow(dataset)
# number of questions in the survey
ret$colnum <- ncol(dataset)
population <- dataset %>%
group_by(What.is.your.current.class.standing.) %>%
summarise(class_population = n())
# freshman population percentage
ret$percent_freshman <-
round(population[population$What.is.your.current.class.standing. == "Freshman", ]$class_population/nrow(dataset)*100)
# sophomore population percentage
ret$percent_sophomore <-
round(population[population$What.is.your.current.class.standing. == "Sophomore", ]$class_population/nrow(dataset)*100)
# junior population percentage
ret$percent_junior <-
round(population[population$What.is.your.current.class.standing. == "Junior", ]$class_population/nrow(dataset)*100)
# senior population percentage
ret$percent_senior <-
round(population[population$What.is.your.current.class.standing. == "Senior", ]$class_population/nrow(dataset)*100)
# percentage of students want to apply to info
apply_info <- dataset %>%
filter(Are.you.interested.in.applying.to.the.Informatics.major. == "Yes")
ret$percent_info <-
round(nrow(apply_info)/nrow(dataset)*100)
# percentage of students using Windows
using_windows <- dataset %>%
filter(What.operating.system.do.you.typically.use. == "Windows")
ret$percent_windows <-
round(nrow(using_windows)/nrow(dataset)*100)
# percentage of students using Mac
using_mac <- dataset %>%
filter(What.operating.system.do.you.typically.use. == "Mac")
ret$percent_mac <-
round(nrow(using_mac)/nrow(dataset)*100)
# percentage of students born in WA
born_in_wa <- dataset %>%
filter(Were.you.born.in.Washington.state. == "Yes")
ret$born_wa <-
round(nrow(born_in_wa)/nrow(dataset)*100)
return(ret)
}
test <- summary(survey)
View(test)
test <- survey %>%
group_by(What.is.your.current.class.standing.) %>%
summarise(yes = length(which(Are.you.interested.in.applying.to.the.Informatics.major. == "Yes")))
View(test)
response <- GET("https://api.themoviedb.org/3/discover/movie?api_key=d0c718e2a61b92b6173965005833dea8&language=en-US&region=US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1")
response_content <- content(response, type = "text")
body_data <- fromJSON(response_content)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/discover/movie?api_key=d0c718e2a61b92b6173965005833dea8&language=en-US&region=US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1")
response_content <- content(response, type = "text")
body_data <- fromJSON(response_content)
View(body_data)
names(body_data)
View(body_data$results)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/discover/movie?api_key=d0c718e2a61b92b6173965005833dea8&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1")
response_content <- content(response, type = "text")
body_data <- fromJSON(response_content)
View(body_data)
View(body_data$results)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/keyword/{keyword_id}?api_key=d0c718e2a61b92b6173965005833dea8")
response_content <- content(response, type = "text")
keyword <- fromJSON(response_content)
View(keyword)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/keyword/337167?api_key=d0c718e2a61b92b6173965005833dea8")
response_content <- content(response, type = "text")
keyword <- fromJSON(response_content)
View(keyword)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/keyword/337167/movies?api_key=d0c718e2a61b92b6173965005833dea8&language=en-US&include_adult=false")
response_content <- content(response, type = "text")
keyword <- fromJSON(response_content)
View(keyword)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/discover/movie?api_key=d0c718e2a61b92b6173965005833dea8&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_keywords=disney")
response_content <- content(response, type = "text")
keyword <- fromJSON(response_content)
View(keyword)
View(keyword)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/discover/movie?api_key=d0c718e2a61b92b6173965005833dea8&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_keywords=Disney")
response_content <- content(response, type = "text")
keyword <- fromJSON(response_content)
View(keyword)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/search/keyword?api_key=d0c718e2a61b92b6173965005833dea8&query=cat")
response_content <- content(response, type = "text")
keyword <- fromJSON(response_content)
View(keyword)
View(keyword$results)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/search/keyword?api_key=d0c718e2a61b92b6173965005833dea8&query=big")
response_content <- content(response, type = "text")
keyword <- fromJSON(response_content)
View(keyword$results)
View(keyword$results)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/search/keyword?api_key=d0c718e2a61b92b6173965005833dea8&query=big")
response_content <- content(response, type = "text")
keyword <- fromJSON(response_content)
View(keyword$results)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/search/keyword?api_key=d0c718e2a61b92b6173965005833dea8&query=zootopia")
response_content <- content(response, type = "text")
keyword <- fromJSON(response_content)
View(keyword$results)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/search/keyword?api_key=d0c718e2a61b92b6173965005833dea8&query=snowwhite")
response_content <- content(response, type = "text")
keyword <- fromJSON(response_content)
View(keyword$results)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/search/keyword?api_key=d0c718e2a61b92b6173965005833dea8&query=Guardians")
response_content <- content(response, type = "text")
keyword <- fromJSON(response_content)
View(keyword$results)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/keyword/202825/movies?api_key=d0c718e2a61b92b6173965005833dea8&language=en-US&include_adult=false")
response_content <- content(response, type = "text")
keyword <- fromJSON(response_content)
View(keyword)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/movie/269149/keywords?api_key=d0c718e2a61b92b6173965005833dea8")
response_content <- content(response, type = "text")
keyword <- fromJSON(response_content)
View(keyword)
View(keyword$keywords)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/discover/movie?api_key=d0c718e2a61b92b6173965005833dea8&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=10")
response_content <- content(response, type = "text")
body_data <- fromJSON(response_content)
View(body_data$results)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/discover/movie?api_key=d0c718e2a61b92b6173965005833dea8&language=en-US&sort_by=vote_average.desc&include_adult=false&include_video=false&page=1")
response_content <- content(response, type = "text")
body_data <- fromJSON(response_content)
View(body_data$results)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/discover/movie?api_key=d0c718e2a61b92b6173965005833dea8&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1")
response_content <- content(response, type = "text")
body_data <- fromJSON(response_content)
> View(body_data$results)
View(body_data$results)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/discover/movie?api_key=d0c718e2a61b92b6173965005833dea8&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=2")
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
View(body$results)
setwd("~/Documents/INFO201/Final-Project")
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/discover/movie?api_key=d0c718e2a61b92b6173965005833dea8&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1")
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
View(body$results)
data <- flatten(body$results)
View(data)
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/discover/movie?api_key=d0c718e2a61b92b6173965005833dea8&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false")
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
View(body$results)
base_url_civic <- "api.themoviedb.org/"
resource <- "/3/discover/movie"
url_full_civic <- paste0(base_url_civic, resource)
api-key <- "d0c718e2a61b92b6173965005833dea8"
library(httr)
library(jsonlite)
response <- GET("https://api.themoviedb.org/3/discover/movie?api_key=d0c718e2a61b92b6173965005833dea8&sort_by=popularity.desc&include_video=false")
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
View(body$results)
View(body)
View(body)
