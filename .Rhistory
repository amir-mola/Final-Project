from the side bar and is shown a bar graph of the movies released that
year categorized by genre. Most movies have multiple genres, so there
are overlaps within the shown data."),
tags$li("The last tab shows a 3D plot of maximum of 20 recommended movies
(based on the selected movie), and their vote count, vote average and
release date."),
tags$h2("Further Analysis"),
tags$p("While our analysis does answer some useful questions, we can
further analyse to answer more specific questions such as:
"),
tags$li("Does the  original language affect the voting ranking as some
languages are more widely spoken?
"),
tags$h2("Project Creators"),
tags$li("Amir Mola"),
tags$img(src = "https://scontent.fsea1-1.fna.fbcdn.net/v/t1.0-1/18033341
_417189041992204_458043244687472060_n.jpg?_nc_cat=0&_nc_eui2=AeHl4Q81BR
0RuOkZgK43sNHzeGyugdy9yucKgCnE0gbYcNyB-KuTm-cgxkpvEFozFTwmfvyNL7JMcvLbiR
p6DmdTmt3Sz4pMOZnhrMr8P-_U-w&oh=15a95c2ea00a8588df116c50204d3543&oe=
5BBADD44", width = "200px", height = "200px"),
tags$li("Leona Wada"),
tags$img(src = "https://media.licdn.com/dms/image/C4D03AQFfLeltdKQYdQ/
profile-displayphoto-shrink_800_800/0?e=1533168000&v=beta&t=9esnBSPiB-
lu3lrz98j_FXX5TeJaGgCMIZC4QUDWs-U", width = "200px", height = "200px"),
tags$li("Katie Chen"),
tags$img(src = "https://media.licdn.com/dms/image/C5603AQHh_BurGeIptQ/
profile-displayphoto-shrink_800_800/0?e=1533168000&v=beta&t=LR8Uad5pJuw
lzBxArst6z3Bb6COIaptqc1VID5dH_N0", width = "200px", height = "200px"),
tags$li("Jennifer Li"),
tags$img(src = "https://scontent-sea1-1.xx.fbcdn.net/v/t1.0-9/27067724_
2060265067333436_3074257672452513759_n.jpg?oh=1a75daafb7fb762458c914dc26b
5f99b&oe=5AEB5A9A", width = "200px", height = "200px")
)
),
tabPanel(
"scatterplot",
titlePanel("Movie explore"),
tags$p("The first tab is a scatterplot that shows"),
sidebarLayout(
sidebarPanel(
tags$p("The first tab is a scatterplot that shows"),
selectInput("genre",
label = "Please select a genre",
choices = c("", genre_list$name)
),
sliderInput("slider1",
label = "Please select a year range", min = 1920,
max = 2020, value = c(1930, 2020)
),
sliderInput("slider2",
label = "Please select a rating range", min = 0,
max = 10, value = c(0, 10)
)
),
mainPanel(plotlyOutput("scatterplot"))
)
),
tabPanel(
"barplot",
titlePanel("genres by year"),
tags$p("The second tab is a bar graph that provides the viewer information
regarding release years
and genres. The user selects a year from the side bar and is shown a bar
graph of the movies released that year categorized by genre. Most movies
have multiple genres, so there are overlaps within the shown data."),
sidebarLayout(
sidebarPanel(
tags$p("The second tab is a bar graph that provides the viewer
information regarding release years
and genres. The user selects a year from the side bar and is shown
a bar graph of the movies released that year categorized by genre.
Most movies have multiple genres, so there are overlaps within the
shown data."),
selectInput("yearvar", label = "Please select release year", choices =
data$release_year, selected = 4)
),
mainPanel(plotlyOutput("barplot"))
)
),
tabPanel(
"three_d_plot",
titlePanel("movie recommandations"),
sidebarLayout(
sidebarPanel(
selectInput("movie", label = "Please select a movie",
choices = data$title, selected = "Deadpool 2")
),
mainPanel(plotlyOutput("three_d_plot"))
)
)
))
styler:::style_active_file()
lintr:::addin_lint()
## Set up
library(plotly)
library(stringr)
library(dplyr)
library(lubridate)
library(httr)
library(jsonlite)
source("api.R")
data <- read.csv("data/tmdb_data.csv", stringsAsFactors = FALSE)
## Add a coloumn for just the release year
a <- ymd(data$release_date)
data$release_year <- year(a)
## Get genre from the genre id
response <- GET(paste0(
"https://api.themoviedb.org/3/genre/movie/list?api_key=", api_key
))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
## Make dataframe for each genre
data <- select(data, title, release_year, genre_ids)
action <- data[grepl("28", data$genre_ids), ]
adventure <- data[grepl("12", data$genre_ids), ]
animation <- data[grepl("16", data$genre_ids), ]
comedy <- data[grepl("35", data$genre_ids), ]
crime <- data[grepl("80", data$genre_ids), ]
documentary <- data[grepl("99", data$genre_ids), ]
drama <- data[grepl("18", data$genre_ids), ]
family <- data[grepl("10751", data$genre_ids), ]
fantasy <- data[grepl("14", data$genre_ids), ]
history <- data[grepl("36", data$genre_ids), ]
horror <- data[grepl("27", data$genre_ids), ]
music <- data[grepl("10402", data$genre_ids), ]
mystery <- data[grepl("9648", data$genre_ids), ]
romance <- data[grepl("10749", data$genre_ids), ]
sci_fi <- data[grepl("878", data$genre_ids), ]
tv <- data[grepl("10770", data$genre_ids), ]
thriller <- data[grepl("53", data$genre_ids), ]
war <- data[grepl("10752", data$genre_ids), ]
western <- data[grepl("37", data$genre_ids), ]
# Build bar graph
build_graph <- function(data, yearvar) {
## Filter out genre to the specific year and count how many movies there are
action <- filter(action, release_year == yearvar)
action_count <- if (nrow(action) > 0) {
action_count <- nrow(action)
} else {
action_count <- 0
}
adventure <- filter(adventure, release_year == yearvar)
adventure_count <- if (nrow(adventure) > 0) {
adventure_count <- nrow(adventure)
} else {
adventure_count <- 0
}
animation <- filter(animation, release_year == yearvar)
animation_count <- if (nrow(animation) > 0) {
animation_count <- nrow(animation)
} else {
animation_count <- 0
}
comedy <- filter(comedy, release_year == yearvar)
comedy_count <- if (nrow(comedy) > 0) {
comedy_count <- nrow(comedy)
} else {
comedy_count <- 0
}
crime <- filter(crime, release_year == yearvar)
crime_count <- if (nrow(crime) > 0) {
crime_count <- nrow(crime)
} else {
crime_count <- 0
}
documentary <- filter(documentary, release_year == yearvar)
doc_count <- if (nrow(documentary) > 0) {
doc_count <- nrow(documentary)
} else {
doc_count <- 0
}
drama <- filter(drama, release_year == yearvar)
drama_count <- if (nrow(drama) > 0) {
drama_count <- nrow(drama)
} else {
drama_count <- 0
}
family <- filter(family, release_year == yearvar)
fam_count <- if (nrow(family) > 0) {
fam_count <- nrow(family)
} else {
fam_count <- 0
}
fantasy <- filter(fantasy, release_year == yearvar)
fantasy_count <- if (nrow(fantasy) > 0) {
fantasy_count <- nrow(fantasy)
} else {
fantasy_count <- 0
}
history <- filter(history, release_year == yearvar)
hist_count <- if (nrow(history) > 0) {
hist_count <- nrow(history)
} else {
hist_count <- 0
}
horror <- filter(horror, release_year == yearvar)
horror_count <- if (nrow(horror) > 0) {
horror_count <- nrow(horror)
} else {
horror_count <- 0
}
music <- filter(music, release_year == yearvar)
music_count <- if (nrow(music) > 0) {
music_count <- nrow(music)
} else {
music_count <- 0
}
mystery <- filter(mystery, release_year == yearvar)
mystery_count <- if (nrow(mystery) > 0) {
mystery_count <- nrow(mystery)
} else {
mystery_count <- 0
}
romance <- filter(romance, release_year == yearvar)
rom_count <- if (nrow(romance) > 0) {
rom_count <- nrow(romance)
} else {
rom_count <- 0
}
sci_fi <- filter(sci_fi, release_year == yearvar)
sci_fi_count <- if (nrow(sci_fi) > 0) {
sci_fi_count <- nrow(sci_fi)
} else {
sci_fi_count <- 0
}
tv <- filter(tv, release_year == yearvar)
tv_count <- if (nrow(tv) > 0) {
tv_count <- nrow(tv)
} else {
tv_count <- 0
}
thriller <- filter(thriller, release_year == yearvar)
thriller_count <- if (nrow(thriller) > 0) {
thriller_count <- nrow(thriller)
} else {
thriller_count <- 0
}
war <- filter(war, release_year == yearvar)
war_count <- if (nrow(war) > 0) {
war_count <- nrow(war)
} else {
war_count <- 0
}
western <- filter(western, release_year == yearvar)
western_count <- if (nrow(western) > 0) {
western_count <- nrow(western)
} else {
western_count <- 0
}
## Use genre count data to make the bar graph
plot_ly(data,
x = ~ yearvar, y = ~ action_count, type = "bar",
name = "Action"
) %>%
add_trace(y = ~ adventure_count, name = "Adventure") %>%
add_trace(y = ~ animation_count, name = "Animation") %>%
add_trace(y = ~ comedy_count, name = "Comedy") %>%
add_trace(y = ~ crime_count, name = "Crime") %>%
add_trace(y = ~ doc_count, name = "Documentary") %>%
add_trace(y = ~ drama_count, name = "Drama") %>%
add_trace(y = ~ fam_count, name = "Family") %>%
add_trace(y = ~ fantasy_count, name = "Fantasy") %>%
add_trace(y = ~ hist_count, name = "History") %>%
add_trace(y = ~ horror_count, name = "Horror") %>%
add_trace(y = ~ music_count, name = "Music") %>%
add_trace(y = ~ mystery_count, name = "Mystery") %>%
add_trace(y = ~ rom_count, name = "Romance") %>%
add_trace(y = ~ sci_fi_count, name = "Sci-Fi") %>%
add_trace(y = ~ tv_count, name = "TV") %>%
add_trace(y = ~ thriller_count, name = "Thriller") %>%
add_trace(y = ~ western_count, name = "Western") %>%
add_trace(y = ~ war_count, name = "War") %>%
layout(
yaxis = list(title = "Count", range = c(0, max(
adventure_count, animation_count,
comedy_count, crime_count, doc_count,
drama_count, fam_count, fantasy_count,
hist_count, horror_count, music_count,
mystery_count, rom_count, sci_fi_count,
tv_count, thriller_count, western_count,
war_count
))),
xaxis = list(title = "Release Year"),
barmode = "Group"
)
}
styler:::style_active_file()
styler:::style_active_file()
lintr:::addin_lint()
styler:::style_active_file()
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
#  returns a 3d plot of the recommended movies based on their vote count,
# vote average and date of released
three_d_rec <- function(data, movie_name) {
# Finding the movie id ----------------------------------------------------
movie <- filter(data, title == movie_name)
movie_id <- movie$id
# Getting data from the API -----------------------------------------------
url <- paste0(
"https://api.themoviedb.org/3/movie/", movie_id,
"/recommendations?api_key=", api_key
)
response <- GET(url)
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
dataset <- as.data.frame(body$results)
if (nrow(dataset) == 0) {
p <- plot_ly(dataset,
x = ~ 0, y = ~ 0, z = ~ 0,
text = ~ "No Recommendation found"
) %>%
add_markers() %>%
layout(title = "No Recommendation found")
return(p)
} else {
p <- plot_ly(dataset,
x = ~ vote_count, y = ~ vote_average, z = ~ release_date,
text = ~ original_title,
marker = list(
color = ~ vote_average, colorscale = c("#FFE1A1", "#683531"),
showscale = TRUE
)
) %>%
add_markers() %>%
layout(
title = "Recommendation Analysis", scene = list(
xaxis = list(title = "Vote Average"),
yaxis = list(title = "Vote Count"),
zaxis = list(title = "Date")
),
annotations = list(
x = 1.13,
y = 1.05,
text = "Vote Average",
xref = "paper",
yref = "paper",
showarrow = FALSE
)
)
return(p)
}
}
styler:::style_active_file()
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
scatter_plot <- function(dataset, year_start, year_end, genre, rating_low,
rating_high) {
# create new column called "release_year", get rid of NA for "release_year"
# column
dataset$release_year <- as.numeric(format(as.Date(dataset$release_date,
"%Y-%m-%d"), "%Y"))
completeVec <- complete.cases(dataset[, "release_year"])
dataset <- dataset[completeVec, ]
# get genre list
response <-
GET(paste0("https://api.themoviedb.org/3/genre/movie/list?api_key=",
api_key))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
# get language list
response_ <-
GET(paste0("https://api.themoviedb.org/3/configuration/languages?api_key=",
api_key))
response_content_ <- content(response_, type = "text")
language_list <- fromJSON(response_content_)
# join dataset with language list
language_list$original_language <- language_list$iso_639_1
language <- language_list %>% select(original_language, english_name)
dataset <- full_join(dataset, language)
# max for x-axis and y-axis
xmax <- max(dataset$release_year)
ymax <- max(dataset$vote_average)
# filter dataset
if (genre != "") {
genre <- as.character(genre_list[genre_list$name == genre, ]$id)
}
new_data <- dataset %>%
filter(release_year >= year_start & release_year <= year_end) %>%
filter(grepl(genre, genre_ids)) %>%
filter(vote_average >= rating_low & vote_average <= rating_high)
# scatter plot
plot_ly(new_data,
x = ~ release_year, y = ~ vote_average, hoverinfo = "text",
text = ~ paste(
"Movie: ", title, " (", original_title, ")", "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
english_name
),
color = ~ english_name,
mode = "markers", marker = list(opacity = .7, size = 10)
) %>%
layout(
title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, xmax), title = "Release Year"),
yaxis = list(range = c(0, ymax), title = "Vote Average")
) %>%
return()
}
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
library(httr)
library(jsonlite)
library(dplyr)
library(plotly)
source("api.R")
scatter_plot <- function(dataset, year_start, year_end, genre, rating_low,
rating_high) {
# create new column called "release_year", get rid of NA for "release_year"
# column
dataset$release_year <- as.numeric(format(as.Date(
dataset$release_date,
"%Y-%m-%d"
), "%Y"))
complete_vec <- complete.cases(dataset[, "release_year"])
dataset <- dataset[complete_vec, ]
# get genre list
response <-
GET(paste0(
"https://api.themoviedb.org/3/genre/movie/list?api_key=",
api_key
))
response_content <- content(response, type = "text")
genre_list <- fromJSON(response_content)$genres
# get language list
response_new <-
GET(paste0(
"https://api.themoviedb.org/3/configuration/languages?api_key=",
api_key
))
response_content_ <- content(response_new, type = "text")
language_list <- fromJSON(response_content_)
# join dataset with language list
language_list$original_language <- language_list$iso_639_1
language <- language_list %>% select(original_language, english_name)
dataset <- full_join(dataset, language)
# max for x-axis and y-axis
xmax <- max(dataset$release_year)
ymax <- max(dataset$vote_average)
# filter dataset
if (genre != "") {
genre <- as.character(genre_list[genre_list$name == genre, ]$id)
}
new_data <- dataset %>%
filter(release_year >= year_start & release_year <= year_end) %>%
filter(grepl(genre, genre_ids)) %>%
filter(vote_average >= rating_low & vote_average <= rating_high)
# scatter plot
plot_ly(new_data,
x = ~ release_year, y = ~ vote_average, hoverinfo = "text",
text = ~ paste(
"Movie: ", title, " (", original_title, ")", "<br>Year: ", release_date,
"<br>Rating: ", vote_average, "<br>Language: ",
english_name
),
color = ~ english_name,
mode = "markers", marker = list(opacity = .7, size = 10)
) %>%
layout(
title = "Movie Release Year vs Vote Average",
xaxis = list(range = c(1920, xmax), title = "Release Year"),
yaxis = list(range = c(0, ymax), title = "Vote Average")
) %>%
return()
}
library(httr)
library(jsonlite)
source("api.R")
# get the full url
pagenum <- 1
url <- function(pagenum) {
base_url <- "https://api.themoviedb.org"
resource <- paste0("/3/discover/movie?api_key=", api_key, "&sort_by=popularity.desc&page=", pagenum)
url_full <- paste0(base_url, resource)
}
# get one page dataset
get_data <- function(pagenum) {
response <- GET(url(pagenum))
response_content <- content(response, type = "text")
body <- fromJSON(response_content)
}
# get 40 pages of dataset at each time, take 15 seconds to get another 40 pages
make_csv <- function(first_page, total_page) {
last_page <- get_data(first_page)
for (i in first_page + 1:total_page) {
last_page <- rbind(last_page, get_data(i))
}
return(last_page)
}
page1 <- make_csv(1, 40)
styler:::style_active_file()
Q
Q
Q
styler:::style_active_file()
styler:::style_active_file()
lintr:::addin_lint()
styler:::style_active_file()
lintr:::addin_lint()
styler:::style_active_file()
lintr:::addin_lint()
